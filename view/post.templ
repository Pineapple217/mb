package view

import (
	"github.com/Pineapple217/mb/database"
	ct "github.com/Pineapple217/mb/context"
	"strconv"
	"strings"
	"database/sql"
)

templ postBase(post database.Post, selected bool) {
	// class="lat"
	<article
		if selected {
			id="#"
		}
	>
		<header>
			@templ.Raw(UnixTimeToHTMLDateTime(post.CreatedAt))
			<p class="s">{ " #" +  strconv.FormatInt(post.CreatedAt, 10) + " " }</p>
			<div class="r">
				<a href={ templ.URL("/post/" + strconv.FormatInt(post.CreatedAt, 10)) } rel="canonical">[share]</a>
				if ct.IsAuth(ctx) {
					<a href={ templ.URL("/post/" + strconv.FormatInt(post.CreatedAt, 10) + "/edit") } title="edit">[e]</a>
					<a href={ templ.URL("/post/" + strconv.FormatInt(post.CreatedAt, 10) + "/delete") } title="delete">[x]</a>
				}
			</div>
			<br/>
			if post.Tags.Valid {
				{ "[ " + strings.Replace(post.Tags.String, " ", " | ", -1) + " ]" }
			}
			{ "" }
		</header>
		<main>
			@templ.Raw(MdToHTML(ctx, post.Content))
		</main>
	</article>
}

func getTagsOrEmpty(s sql.NullString) string {
	if s.Valid {
		return s.String
	}
	return ""
}

templ Post(post database.Post, tags []database.GetAllTagsRow) {
	@Base(getTagsOrEmpty(post.Tags), tags) {
		<nav>
			<div><a href={ templ.URL("/?p=" + strconv.FormatInt(post.CreatedAt, 10) + "##") }>← View post in timeline</a></div>
		</nav>
		@postBase(post, false)
	}
}

templ DeletePost(post database.Post) {
	@Base("", []database.GetAllTagsRow(nil)) {
		<form action={ templ.URL("/post/" + strconv.FormatInt(post.CreatedAt, 10) + "/delete") } method="POST">
			<p class="s">Are you sure you want to delete this post? </p>
			<input type="hidden" value={ strconv.FormatInt(post.CreatedAt, 10) } name="xid"/>
			<input type="submit" id="submit_d" tabindex="1"/>
			<label for="submit_d">[ delete ]</label>
		</form>
		@postBase(post, false)
	}
}

templ Posts(posts []database.Post, tags []database.GetAllTagsRow, nav templ.Component, selected int64) {
	@Base(ct.GetPostCountStr(ctx)+" posts with "+strconv.Itoa(len(tags))+" unique tags", tags) {
		@nav
		for _, post := range(posts) {
			if post.CreatedAt == selected {
				@postBase(post, true)
			} else {
				@postBase(post, false)
			}
		}
		@nav
		<hr color="gray"/>
		<br/>
	}
}

templ Nav(page int, maxPage int, query string) {
	<nav>
		<div>
			if page != 0 {
				<a href={ templ.URL("/?page=0" + query) }>←← First</a>
				<a href={ templ.URL("/?page=" + strconv.Itoa(page-1) + query) } rel="prev">← Previous</a>
			}
		</div>
		<div>
			if page != maxPage {
				<a href={ templ.URL("/?page=" + strconv.Itoa(page+1) + query) } rel="next">Next →</a>
				<a href={ templ.URL("/?page=" + strconv.Itoa(maxPage) + query) }>Last →→</a>
			}
		</div>
	</nav>
}
