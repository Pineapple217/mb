package view

import (
	"github.com/Pineapple217/mb/pkg/config"
	ct "github.com/Pineapple217/mb/pkg/context"
	"github.com/Pineapple217/mb/pkg/database"
	s "github.com/Pineapple217/mb/pkg/static"
	"net/url"
	"strconv"
	"time"
	"unicode"
	"unicode/utf8"
)

templ boiler(desc string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
			<meta name="theme-color" content="#181818"/>
			<meta name="darkreader-lock"/>
			if desc != "" {
				<meta name="description" content={ desc }/>
			}
			<link rel="icon" href={ s.StaticMap["/static/favicon.ico"] } sizes="32x32"/>
			<link rel="icon" href={ s.StaticMap["/static/icon.svg"] } type="image/svg+xml"/>
			<link rel="apple-touch-icon" href={ s.StaticMap["/static/apple-touch-icon.png"] }/>
			<link rel="manifest" href="/site.webmanifest"/>
			<link rel="stylesheet" href={ s.StaticMap["/static/css/main.css"] }/>
			<title>MB</title>
		</head>
		// temp lighthouse fix
		// https://github.com/GoogleChrome/lighthouse/issues/16404
		<style>
			:where(h1) {
				margin-block: 0.67em;
				font-size: 2em;
			}
		</style>
		<a href={ templ.URL("/auth?r=" + url.QueryEscape(ct.GetPath(ctx))) } accesskey="a" aria-hidden="true" tabindex="-1"></a>
		<a href="/media" accesskey="m" aria-hidden="true" tabindex="-1"></a>
		<a href="/backup" accesskey="b" aria-hidden="true" tabindex="-1"></a>
		{ children... }
	</html>
}

templ header() {
	<div class="cnt">
		<a class="nvis" href="/">
			<pre class="logo">
				{ config.HomepageLogo }
			</pre>
		</a>
		<div class="cc">
			<p>
				<a href={ templ.URL(config.HomepageLink) }>{ config.HomepageLink }</a>
				- © { config.HomepageRights }
				{ strconv.Itoa(time.Now().Year()) }
				<br/>
				Welcome! - { ct.GetPostCountStr(ctx) } total posts. [<a href="/index.xml">RSS</a>]
				<br/>
				{ config.HomepageMessage }
				[<a href="/post/latest">LATEST</a>]
			</p>
		</div>
	</div>
}

templ Base(desc string, tags NullTags) {
	@boiler(desc) {
		<body>
			@header()
			<hr color="gray"/>
			if tags.Valid {
				@search(tags.Tags)
				<hr color="gray"/>
				if ct.IsAuth(ctx) {
					@createPost()
					<hr color="gray"/>
				}
			}
		</body>
		{ children... }
	}
}

templ search(tags []database.GetAllTagsRow) {
	<details>
		<summary>Search <span class="cl">{ ct.GetPostCountStr(ctx) }</span> posts with <span class="cl">{ strconv.Itoa(len(tags)) }</span> unique tags</summary>
		<br/>
		<form action="/" method="GET">
			for _, tag := range(tags) {
				// TODO: font size based on count
				<div class="ib">
					<input type="checkbox" id={ "tag_" + tag.Tag.(string) } name={ "tag_" + tag.Tag.(string) }/>
					<label for={ "tag_" + tag.Tag.(string) }>{ tag.Tag.(string) }: <strong>{ strconv.FormatInt(tag.TagCount, 10) } </strong></label>
				</div>
			}
			<br/>
			<div style="text-align: right;">
				<abbr title="Case Insensitive Glob Query"><input type="search" name="search" placeholder="example: *.wasm"/></abbr>
				<label>
					<input type="submit"/> [ go ]
				</label>
			</div>
		</form>
	</details>
}

// func calcFontSize(count int64) string {
// 	return fmt.Sprintf("font-size: %fem;", 2.0 - float64(tag.TagCount) * 0.02)
// }
templ EditPost(post database.Post) {
	@Base("", NullTags{Valid: false}) {
		<nav>
			<div><a href={ templ.URL("/?p=" + strconv.FormatInt(post.CreatedAt, 10) + "##") }>← Back</a></div>
		</nav>
		<br/>
		<form action={ templ.URL("/post/" + strconv.FormatInt(post.CreatedAt, 10) + "/edit") } method="POST">
			<div>
				<label>
					tags: <input type="text" name="tags" value={ post.Tags.String } tabindex="1" size="30"/>
				</label>
				// TODO: checkbox is not selectable
				<input type="checkbox" name="private" id="private-e" tabindex="3" checked?={ post.Private > 0 }/>
				<label for="private-e">private</label>
				<input type="submit" id="submit_e_p" name="action" value="post" tabindex="5" accesskey="p"/>
				<label for="submit_e_p" class="r">[ post ]</label>
				<input type="submit" id="submit_e_s" name="action" value="safe" tabindex="4" accesskey="s"/>
				<label for="submit_e_s" class="r">[ save ]</label>
			</div>
			<br/>
			<br/>
			<textarea name="content" rows={ strconv.Itoa(getRows(post.Content)) } tabindex="2">{ post.Content }</textarea>
			<input type="hidden" value={ strconv.FormatInt(post.CreatedAt, 10) } name="xid"/>
		</form>
	}
}

templ createPost() {
	<details>
		<summary>New Post</summary>
		<br/>
		<form action="/post" method="POST">
			<div>
				<label>
					tags: <input type="text" name="tags" value="" tabindex="1" size="30"/>
				</label>
				// TODO: checkbox is not selectable
				<input type="checkbox" name="private" id="private" tabindex="3"/>
				<label for="private">private</label>
				<input type="submit" id="submit_p" tabindex="4"/>
				<label for="submit_p" class="r">[ post ]</label>
			</div>
			<br/>
			<br/>
			<textarea name="content" rows="15" tabindex="2"></textarea>
		</form>
	</details>
}

const minRows = 15
const maxWidthInChars = 89

func getRows(content string) int {
	count := 0
	currentLineLen := 0
	lastWhitespace := -1

	i := 0
	rs := []rune(content)
	for range 100_000 { // prevent infinite loop
		r := rs[i]
		if unicode.IsSpace(r) {
			lastWhitespace = i
		}
		if r == '\n' {
			count++
			currentLineLen = 0
		} else {
			charWidth := utf8.RuneLen(r)
			if currentLineLen+charWidth >= maxWidthInChars {
				count++
				currentLineLen = 0
				if i-lastWhitespace < maxWidthInChars-1 {
					i = lastWhitespace + 1
				}
			} else {
				currentLineLen += charWidth
			}
		}
		i++
		if i >= len(rs) {
			break
		}
	}
	if currentLineLen > 0 {
		count++
	}

	count += 2 // extra padding

	if count < minRows {
		count = minRows
	}
	return count
}
