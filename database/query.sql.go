// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  created_at, tags, content
) VALUES (
  strftime('%s', 'now'), ?, ?
)
RETURNING id, created_at, tags, content
`

type CreatePostParams struct {
	Tags    sql.NullString
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Tags, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Tags,
		&i.Content,
	)
	return i, err
}

const createSpotifyCache = `-- name: CreateSpotifyCache :one
INSERT INTO spotify_cache (
  track_id, track_name, artist_name, artist_id, cover_art_url, audio_preview_url
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, track_id, track_name, artist_name, artist_id, cover_art_url, audio_preview_url
`

type CreateSpotifyCacheParams struct {
	TrackID         string
	TrackName       string
	ArtistName      string
	ArtistID        string
	CoverArtUrl     string
	AudioPreviewUrl string
}

func (q *Queries) CreateSpotifyCache(ctx context.Context, arg CreateSpotifyCacheParams) (SpotifyCache, error) {
	row := q.db.QueryRowContext(ctx, createSpotifyCache,
		arg.TrackID,
		arg.TrackName,
		arg.ArtistName,
		arg.ArtistID,
		arg.CoverArtUrl,
		arg.AudioPreviewUrl,
	)
	var i SpotifyCache
	err := row.Scan(
		&i.ID,
		&i.TrackID,
		&i.TrackName,
		&i.ArtistName,
		&i.ArtistID,
		&i.CoverArtUrl,
		&i.AudioPreviewUrl,
	)
	return i, err
}

const createYoutubebCache = `-- name: CreateYoutubebCache :one
INSERT INTO youtube_cache (
  yt_id, thumb, title, author, author_url
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, yt_id, thumb, title, author, author_url
`

type CreateYoutubebCacheParams struct {
	YtID      string
	Thumb     string
	Title     string
	Author    string
	AuthorUrl string
}

func (q *Queries) CreateYoutubebCache(ctx context.Context, arg CreateYoutubebCacheParams) (YoutubeCache, error) {
	row := q.db.QueryRowContext(ctx, createYoutubebCache,
		arg.YtID,
		arg.Thumb,
		arg.Title,
		arg.Author,
		arg.AuthorUrl,
	)
	var i YoutubeCache
	err := row.Scan(
		&i.ID,
		&i.YtID,
		&i.Thumb,
		&i.Title,
		&i.Author,
		&i.AuthorUrl,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE created_at = ?
`

func (q *Queries) DeletePost(ctx context.Context, createdAt int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, createdAt)
	return err
}

const getAllTags = `-- name: GetAllTags :many
WITH split (
    tag,
    tags_remaining
)
AS (-- Initial query
    SELECT '',
           tags || ' '
      FROM posts
    UNION ALL
    SELECT trim(substr(tags_remaining, 0, instr(tags_remaining, ' ') ) ),
           substr(tags_remaining, instr(tags_remaining, ' ') + 1) 
      FROM split
     WHERE tags_remaining != ''
)
SELECT MIN(tag) as tag,
       COUNT( * ) AS tag_count
FROM split
WHERE tag != ''
GROUP BY tag
ORDER BY tag_count DESC
`

type GetAllTagsRow struct {
	Tag      interface{}
	TagCount int64
}

func (q *Queries) GetAllTags(ctx context.Context) ([]GetAllTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTagsRow
	for rows.Next() {
		var i GetAllTagsRow
		if err := rows.Scan(&i.Tag, &i.TagCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, created_at, tags, content FROM posts
WHERE created_at = ? LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, createdAt int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, createdAt)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Tags,
		&i.Content,
	)
	return i, err
}

const getPostCount = `-- name: GetPostCount :one
SELECT COUNT(*)
FROM posts
`

func (q *Queries) GetPostCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostPage = `-- name: GetPostPage :one
SELECT 
    CAST(
        CASE 
            WHEN EXISTS (SELECT 1 FROM posts WHERE posts.created_at = ?1)
            THEN CEIL((SELECT COUNT(*) FROM posts WHERE posts.created_at >= (SELECT posts.created_at FROM posts WHERE created_at = ?1)) / 25.0) - 1
            ELSE -1
        END AS INT
    ) AS page_number
`

func (q *Queries) GetPostPage(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostPage, id)
	var page_number int64
	err := row.Scan(&page_number)
	return page_number, err
}

const getSpotifyCache = `-- name: GetSpotifyCache :one
SELECT id, track_id, track_name, artist_name, artist_id, cover_art_url, audio_preview_url FROM spotify_cache
WHERE track_id = ? LIMIT 1
`

func (q *Queries) GetSpotifyCache(ctx context.Context, trackID string) (SpotifyCache, error) {
	row := q.db.QueryRowContext(ctx, getSpotifyCache, trackID)
	var i SpotifyCache
	err := row.Scan(
		&i.ID,
		&i.TrackID,
		&i.TrackName,
		&i.ArtistName,
		&i.ArtistID,
		&i.CoverArtUrl,
		&i.AudioPreviewUrl,
	)
	return i, err
}

const getTagsCount = `-- name: GetTagsCount :one
WITH split(tag, tags_remaining) AS (
  -- Initial query
  SELECT 
    '',
    tags || ' '
  FROM posts
  UNION ALL
  SELECT
    trim(substr(tags_remaining, 0, instr(tags_remaining, ' '))),
    substr(tags_remaining, instr(tags_remaining, ' ') + 1)
  FROM split
  WHERE tags_remaining != ''
)
SELECT COUNT(DISTINCT tag) AS unique_tag_count
FROM split
WHERE tag != ''
`

func (q *Queries) GetTagsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTagsCount)
	var unique_tag_count int64
	err := row.Scan(&unique_tag_count)
	return unique_tag_count, err
}

const getYoutubeCache = `-- name: GetYoutubeCache :one
SELECT id, yt_id, thumb, title, author, author_url FROM youtube_cache
WHERE yt_id = ? LIMIT 1
`

func (q *Queries) GetYoutubeCache(ctx context.Context, ytID string) (YoutubeCache, error) {
	row := q.db.QueryRowContext(ctx, getYoutubeCache, ytID)
	var i YoutubeCache
	err := row.Scan(
		&i.ID,
		&i.YtID,
		&i.Thumb,
		&i.Title,
		&i.Author,
		&i.AuthorUrl,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, created_at, tags, content FROM posts
ORDER BY created_at DESC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Tags,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
set tags = ?,
    content = ?
WHERE created_at = ?
`

type UpdatePostParams struct {
	Tags      sql.NullString
	Content   string
	CreatedAt int64
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost, arg.Tags, arg.Content, arg.CreatedAt)
	return err
}
